// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RoversTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("MarsRover", SourceFile="MarsRover.feature", SourceLine=0)]
    public partial class MarsRoverFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "MarsRover.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "MarsRover", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void InitializeMarsRover(string testCase, string initialPositionX, string initialPositionY, string setPositionX, string setPositionY, string setFacing, string finalPositionX, string finalPositionY, string finalFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("InitialPositionX", initialPositionX);
            argumentsOfScenario.Add("InitialPositionY", initialPositionY);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            argumentsOfScenario.Add("FinalPositionX", finalPositionX);
            argumentsOfScenario.Add("FinalPositionY", finalPositionY);
            argumentsOfScenario.Add("FinalFacing", finalFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initialize Mars Rover", null, tagsOfScenario, argumentsOfScenario);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table1.AddRow(new string[] {
                            string.Format("{0}", initialPositionX),
                            string.Format("{0}", initialPositionY)});
#line 11
testRunner.Given("Rover is initialized with following position", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table2.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 14
testRunner.When("Rover position is set to the following position", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table3.AddRow(new string[] {
                            string.Format("{0}", finalPositionX),
                            string.Format("{0}", finalPositionY),
                            string.Format("{0}", finalFacing)});
#line 17
testRunner.Then("Rover is at the following position", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Initialize Mars Rover, North", SourceLine=21)]
        public virtual void InitializeMarsRover_North()
        {
#line 10
this.InitializeMarsRover("North", "0", "0", "1", "2", "1", "1", "2", "N", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Initialize Mars Rover, East", SourceLine=21)]
        public virtual void InitializeMarsRover_East()
        {
#line 10
this.InitializeMarsRover("East", "5", "5", "3", "4", "2", "3", "4", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Initialize Mars Rover, South", SourceLine=21)]
        public virtual void InitializeMarsRover_South()
        {
#line 10
this.InitializeMarsRover("South", "100", "200", "1", "2", "3", "1", "2", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Initialize Mars Rover, West", SourceLine=21)]
        public virtual void InitializeMarsRover_West()
        {
#line 10
this.InitializeMarsRover("West", "250", "230", "11", "32", "4", "11", "32", "W", ((string[])(null)));
#line hidden
        }
        
        public virtual void MoveRoverWithNoChangeInDirection(string testCase, string setPositionX, string setPositionY, string setFacing, string command, string finalPositionX, string finalPositionY, string finalFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            argumentsOfScenario.Add("Command", command);
            argumentsOfScenario.Add("FinalPositionX", finalPositionX);
            argumentsOfScenario.Add("FinalPositionY", finalPositionY);
            argumentsOfScenario.Add("FinalFacing", finalFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Rover With No Change in Direction", null, tagsOfScenario, argumentsOfScenario);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table4.AddRow(new string[] {
                            "500",
                            "500"});
#line 31
testRunner.Given("Rover is initialized with following position", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table5.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 34
testRunner.When("Rover position is set to the following position", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Command"});
                table6.AddRow(new string[] {
                            string.Format("{0}", command)});
#line 37
testRunner.And("Rover is moved with following command", ((string)(null)), table6, "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table7.AddRow(new string[] {
                            string.Format("{0}", finalPositionX),
                            string.Format("{0}", finalPositionY),
                            string.Format("{0}", finalFacing)});
#line 40
testRunner.Then("Rover is at the following position", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, North_Case1", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_North_Case1()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("North_Case1", "0", "0", "1", "M", "0", "1", "N", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, North_Case2", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_North_Case2()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("North_Case2", "0", "0", "1", "MM", "0", "2", "N", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, North_Case3", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_North_Case3()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("North_Case3", "0", "0", "1", "MMM", "0", "3", "N", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, East_Case1", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_East_Case1()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("East_Case1", "0", "0", "2", "M", "1", "0", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, East_Case2", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_East_Case2()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("East_Case2", "0", "0", "2", "MM", "2", "0", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, East_Case3", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_East_Case3()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("East_Case3", "0", "0", "2", "MMM", "3", "0", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, South_Case1", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_South_Case1()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("South_Case1", "0", "0", "3", "M", "0", "-1", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, South_Case2", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_South_Case2()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("South_Case2", "0", "0", "3", "MM", "0", "-2", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, South_Case3", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_South_Case3()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("South_Case3", "0", "0", "3", "MMM", "0", "-3", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, West_Case1", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_West_Case1()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("West_Case1", "0", "0", "4", "M", "-1", "0", "W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, West_Case2", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_West_Case2()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("West_Case2", "0", "0", "4", "MM", "-2", "0", "W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With No Change in Direction, West_Case3", SourceLine=44)]
        public virtual void MoveRoverWithNoChangeInDirection_West_Case3()
        {
#line 30
this.MoveRoverWithNoChangeInDirection("West_Case3", "0", "0", "4", "MMM", "-3", "0", "W", ((string[])(null)));
#line hidden
        }
        
        public virtual void TurnRoverRight(string testCase, string setPositionX, string setPositionY, string setFacing, string command, string finalPositionX, string finalPositionY, string finalFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            argumentsOfScenario.Add("Command", command);
            argumentsOfScenario.Add("FinalPositionX", finalPositionX);
            argumentsOfScenario.Add("FinalPositionY", finalPositionY);
            argumentsOfScenario.Add("FinalFacing", finalFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Turn Rover Right", null, tagsOfScenario, argumentsOfScenario);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table8.AddRow(new string[] {
                            "500",
                            "500"});
#line 61
testRunner.Given("Rover is initialized with following position", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table9.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 64
testRunner.When("Rover position is set to the following position", ((string)(null)), table9, "When ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Command"});
                table10.AddRow(new string[] {
                            string.Format("{0}", command)});
#line 67
testRunner.And("Rover is moved with following command", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table11.AddRow(new string[] {
                            string.Format("{0}", finalPositionX),
                            string.Format("{0}", finalPositionY),
                            string.Format("{0}", finalFacing)});
#line 70
testRunner.Then("Rover is at the following position", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Right, Turns_Right_Once", SourceLine=74)]
        public virtual void TurnRoverRight_Turns_Right_Once()
        {
#line 60
this.TurnRoverRight("Turns_Right_Once", "0", "0", "1", "R", "0", "0", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Right, Turns_Right_Twice", SourceLine=74)]
        public virtual void TurnRoverRight_Turns_Right_Twice()
        {
#line 60
this.TurnRoverRight("Turns_Right_Twice", "0", "0", "1", "RR", "0", "0", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Right, Turns_Right_ThreeTimes", SourceLine=74)]
        public virtual void TurnRoverRight_Turns_Right_ThreeTimes()
        {
#line 60
this.TurnRoverRight("Turns_Right_ThreeTimes", "0", "0", "1", "RRR", "0", "0", "W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Right, Turns_Right_FourTimes", SourceLine=74)]
        public virtual void TurnRoverRight_Turns_Right_FourTimes()
        {
#line 60
this.TurnRoverRight("Turns_Right_FourTimes", "0", "0", "1", "RRRR", "0", "0", "N", ((string[])(null)));
#line hidden
        }
        
        public virtual void TurnRoverLeft(string testCase, string setPositionX, string setPositionY, string setFacing, string command, string finalPositionX, string finalPositionY, string finalFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            argumentsOfScenario.Add("Command", command);
            argumentsOfScenario.Add("FinalPositionX", finalPositionX);
            argumentsOfScenario.Add("FinalPositionY", finalPositionY);
            argumentsOfScenario.Add("FinalFacing", finalFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Turn Rover Left", null, tagsOfScenario, argumentsOfScenario);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table12.AddRow(new string[] {
                            "500",
                            "500"});
#line 83
testRunner.Given("Rover is initialized with following position", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table13.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 86
testRunner.When("Rover position is set to the following position", ((string)(null)), table13, "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Command"});
                table14.AddRow(new string[] {
                            string.Format("{0}", command)});
#line 89
testRunner.And("Rover is moved with following command", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table15.AddRow(new string[] {
                            string.Format("{0}", finalPositionX),
                            string.Format("{0}", finalPositionY),
                            string.Format("{0}", finalFacing)});
#line 92
testRunner.Then("Rover is at the following position", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Left, Turns_Left_Once", SourceLine=96)]
        public virtual void TurnRoverLeft_Turns_Left_Once()
        {
#line 82
this.TurnRoverLeft("Turns_Left_Once", "0", "0", "1", "L", "0", "0", "W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Left, Turns_Left_Twice", SourceLine=96)]
        public virtual void TurnRoverLeft_Turns_Left_Twice()
        {
#line 82
this.TurnRoverLeft("Turns_Left_Twice", "0", "0", "1", "LL", "0", "0", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Left, Turns_Left_ThreeTimes", SourceLine=96)]
        public virtual void TurnRoverLeft_Turns_Left_ThreeTimes()
        {
#line 82
this.TurnRoverLeft("Turns_Left_ThreeTimes", "0", "0", "1", "LLL", "0", "0", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Turn Rover Left, Turns_Left_FourTimes", SourceLine=96)]
        public virtual void TurnRoverLeft_Turns_Left_FourTimes()
        {
#line 82
this.TurnRoverLeft("Turns_Left_FourTimes", "0", "0", "1", "LLLL", "0", "0", "N", ((string[])(null)));
#line hidden
        }
        
        public virtual void MoveRoverAndTurnRight(string testCase, string setPositionX, string setPositionY, string setFacing, string command, string finalPositionX, string finalPositionY, string finalFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            argumentsOfScenario.Add("Command", command);
            argumentsOfScenario.Add("FinalPositionX", finalPositionX);
            argumentsOfScenario.Add("FinalPositionY", finalPositionY);
            argumentsOfScenario.Add("FinalFacing", finalFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Rover And Turn Right", null, tagsOfScenario, argumentsOfScenario);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table16.AddRow(new string[] {
                            "30",
                            "40"});
#line 105
testRunner.Given("Rover is initialized with following position", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table17.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 108
testRunner.When("Rover position is set to the following position", ((string)(null)), table17, "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Command"});
                table18.AddRow(new string[] {
                            string.Format("{0}", command)});
#line 111
testRunner.And("Rover is moved with following command", ((string)(null)), table18, "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table19.AddRow(new string[] {
                            string.Format("{0}", finalPositionX),
                            string.Format("{0}", finalPositionY),
                            string.Format("{0}", finalFacing)});
#line 114
testRunner.Then("Rover is at the following position", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Right, MoveRightCase1", SourceLine=118)]
        public virtual void MoveRoverAndTurnRight_MoveRightCase1()
        {
#line 104
this.MoveRoverAndTurnRight("MoveRightCase1", "30", "40", "1", "MR", "30", "41", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Right, MoveRightCase2", SourceLine=118)]
        public virtual void MoveRoverAndTurnRight_MoveRightCase2()
        {
#line 104
this.MoveRoverAndTurnRight("MoveRightCase2", "30", "41", "2", "MRMR", "31", "40", "W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Right, MoveRightCase3", SourceLine=118)]
        public virtual void MoveRoverAndTurnRight_MoveRightCase3()
        {
#line 104
this.MoveRoverAndTurnRight("MoveRightCase3", "31", "40", "4", "MRMRMR", "31", "41", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Right, MoveRightCase4", SourceLine=118)]
        public virtual void MoveRoverAndTurnRight_MoveRightCase4()
        {
#line 104
this.MoveRoverAndTurnRight("MoveRightCase4", "31", "41", "3", "MRMRMRMR", "31", "41", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Right, MoveRightCase5", SourceLine=118)]
        public virtual void MoveRoverAndTurnRight_MoveRightCase5()
        {
#line 104
this.MoveRoverAndTurnRight("MoveRightCase5", "31", "41", "3", "MRMRMRMRMR", "31", "40", "W", ((string[])(null)));
#line hidden
        }
        
        public virtual void MoveRoverAndTurnLeft(string testCase, string setPositionX, string setPositionY, string setFacing, string command, string finalPositionX, string finalPositionY, string finalFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            argumentsOfScenario.Add("Command", command);
            argumentsOfScenario.Add("FinalPositionX", finalPositionX);
            argumentsOfScenario.Add("FinalPositionY", finalPositionY);
            argumentsOfScenario.Add("FinalFacing", finalFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Rover And Turn Left", null, tagsOfScenario, argumentsOfScenario);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table20.AddRow(new string[] {
                            "30",
                            "40"});
#line 130
testRunner.Given("Rover is initialized with following position", ((string)(null)), table20, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table21.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 133
testRunner.When("Rover position is set to the following position", ((string)(null)), table21, "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Command"});
                table22.AddRow(new string[] {
                            string.Format("{0}", command)});
#line 136
testRunner.And("Rover is moved with following command", ((string)(null)), table22, "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table23.AddRow(new string[] {
                            string.Format("{0}", finalPositionX),
                            string.Format("{0}", finalPositionY),
                            string.Format("{0}", finalFacing)});
#line 139
testRunner.Then("Rover is at the following position", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Left, MoveRightCase1", SourceLine=143)]
        public virtual void MoveRoverAndTurnLeft_MoveRightCase1()
        {
#line 129
this.MoveRoverAndTurnLeft("MoveRightCase1", "30", "40", "1", "ML", "30", "41", "W", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Left, MoveRightCase2", SourceLine=143)]
        public virtual void MoveRoverAndTurnLeft_MoveRightCase2()
        {
#line 129
this.MoveRoverAndTurnLeft("MoveRightCase2", "30", "41", "4", "MLML", "29", "40", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Left, MoveRightCase3", SourceLine=143)]
        public virtual void MoveRoverAndTurnLeft_MoveRightCase3()
        {
#line 129
this.MoveRoverAndTurnLeft("MoveRightCase3", "29", "40", "2", "MLMLML", "29", "41", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Left, MoveRightCase4", SourceLine=143)]
        public virtual void MoveRoverAndTurnLeft_MoveRightCase4()
        {
#line 129
this.MoveRoverAndTurnLeft("MoveRightCase4", "29", "41", "3", "MLMLMLML", "29", "41", "S", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover And Turn Left, MoveRightCase5", SourceLine=143)]
        public virtual void MoveRoverAndTurnLeft_MoveRightCase5()
        {
#line 129
this.MoveRoverAndTurnLeft("MoveRightCase5", "29", "41", "3", "MLMLMLMLML", "29", "40", "E", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With Input Command And Verify Final Position", SourceLine=153)]
        public virtual void MoveRoverWithInputCommandAndVerifyFinalPosition()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Rover With Input Command And Verify Final Position", null, tagsOfScenario, argumentsOfScenario);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table24.AddRow(new string[] {
                            "5",
                            "5"});
#line 155
testRunner.Given("Rover is initialized with following position", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table25.AddRow(new string[] {
                            "1",
                            "2",
                            "1"});
#line 158
testRunner.When("Rover position is set to the following position", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Command"});
                table26.AddRow(new string[] {
                            "LMLMLMLMM"});
#line 161
testRunner.And("Rover is moved with following command", ((string)(null)), table26, "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table27.AddRow(new string[] {
                            "1",
                            "3",
                            "N"});
#line 164
testRunner.Then("Rover is at the following position", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Move Rover With Random Command And Verify Final Position", SourceLine=171)]
        public virtual void MoveRoverWithRandomCommandAndVerifyFinalPosition()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Rover With Random Command And Verify Final Position", null, tagsOfScenario, argumentsOfScenario);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table28.AddRow(new string[] {
                            "1000",
                            "1000"});
#line 173
testRunner.Given("Rover is initialized with following position", ((string)(null)), table28, "Given ");
#line hidden
#line 176
testRunner.When("Rover is moved with random command", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 177
testRunner.Then("Rover is at a random position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void InitializeRoverInvalidPositionGivesError(string testCase, string initialPositionX, string initialPositionY, string setPositionX, string setPositionY, string setFacing, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("TestCase", testCase);
            argumentsOfScenario.Add("InitialPositionX", initialPositionX);
            argumentsOfScenario.Add("InitialPositionY", initialPositionY);
            argumentsOfScenario.Add("SetPositionX", setPositionX);
            argumentsOfScenario.Add("SetPositionY", setPositionY);
            argumentsOfScenario.Add("SetFacing", setFacing);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Initialize Rover Invalid Position Gives Error", null, tagsOfScenario, argumentsOfScenario);
#line 181
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y"});
                table29.AddRow(new string[] {
                            string.Format("{0}", initialPositionX),
                            string.Format("{0}", initialPositionY)});
#line 182
testRunner.Given("Rover is initialized with following position", ((string)(null)), table29, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "x",
                            "y",
                            "facing"});
                table30.AddRow(new string[] {
                            string.Format("{0}", setPositionX),
                            string.Format("{0}", setPositionY),
                            string.Format("{0}", setFacing)});
#line 185
testRunner.Then("Rover position is set to the following invalid position and gives error", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Initialize Rover Invalid Position Gives Error, Invalid_Case1", SourceLine=190)]
        public virtual void InitializeRoverInvalidPositionGivesError_Invalid_Case1()
        {
#line 181
this.InitializeRoverInvalidPositionGivesError("Invalid_Case1", "0", "0", "0", "0", "0", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Initialize Rover Invalid Position Gives Error, Invalid_Case2", SourceLine=190)]
        public virtual void InitializeRoverInvalidPositionGivesError_Invalid_Case2()
        {
#line 181
this.InitializeRoverInvalidPositionGivesError("Invalid_Case2", "5", "5", "5", "5", "5", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
